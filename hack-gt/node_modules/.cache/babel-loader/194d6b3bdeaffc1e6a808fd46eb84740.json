{"ast":null,"code":"import { getItems, getIntent } from \"../apis/ncr\";\nimport { MessageContext } from \"../Context\";\nimport React from \"react\";\nconst categories = [\"Milk Tea\", \"Chocolate\", \"Oolong\"];\n\nconst getCategory = intent => {\n  for (let category of categories) {\n    if (category.toLowerCase() === intent) {\n      return category;\n    }\n  }\n\n  return null;\n};\n\nexport const useVoiceCommands = ({\n  transcript,\n  resetTranscript,\n  resetVoice\n}) => {\n  const {\n    selectItems,\n    addItemOrder,\n    items,\n    setIn\n  } = React.useContext(MessageContext);\n  React.useEffect(() => {\n    if (transcript === \"\") return;\n    setTimeout(() => {\n      getIntent(transcript).then(res => res.json()).then(res => {\n        const {\n          intent\n        } = res;\n\n        if (intent === \"menu\") {\n          selectItems(items);\n          resetVoice(\"Here is our Menu\");\n          resetTranscript();\n        } else if (getCategory(intent)) {\n          const category = getCategory(intent);\n          getItems().then(res => res.json()).then(res => {\n            const result = res.Result.filter(r => r.Name.includes(category));\n            selectItems(result);\n            resetVoice(`Here is our ${category}`);\n            resetTranscript();\n          });\n        } else if (intent.includes(\"order\")) {\n          const name = intent.substr(\"order_\".length).replace(/#|_/g, \" \");\n          console.log(items);\n          let s;\n\n          for (let r of items.Result) {\n            if (r.Name.toLowerCase().trim() === name.trim()) {\n              s = r;\n              break;\n            }\n          }\n\n          selectItems([]);\n          addItemOrder(s);\n          resetVoice(\"Ok, I added your order.\");\n          resetTranscript();\n        }\n      });\n    }, 5000);\n  }, [transcript]);\n};","map":{"version":3,"sources":["/Users/thotra/Desktop/hack-gt/src/data/useVoiceCommands.js"],"names":["getItems","getIntent","MessageContext","React","categories","getCategory","intent","category","toLowerCase","useVoiceCommands","transcript","resetTranscript","resetVoice","selectItems","addItemOrder","items","setIn","useContext","useEffect","setTimeout","then","res","json","result","Result","filter","r","Name","includes","name","substr","length","replace","console","log","s","trim"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CAAnB;;AACA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,OAAK,IAAIC,QAAT,IAAqBH,UAArB,EAAiC;AAC/B,QAAIG,QAAQ,CAACC,WAAT,OAA2BF,MAA/B,EAAuC;AACrC,aAAOC,QAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAPD;;AASA,OAAO,MAAME,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,UAD+B;AAE/BC,EAAAA,eAF+B;AAG/BC,EAAAA;AAH+B,CAAD,KAI1B;AACJ,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAA8Cb,KAAK,CAACc,UAAN,CAAiBf,cAAjB,CAApD;AACAC,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,QAAIR,UAAU,KAAK,EAAnB,EAAuB;AACvBS,IAAAA,UAAU,CAAC,MAAM;AACflB,MAAAA,SAAS,CAACS,UAAD,CAAT,CACGU,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACb,cAAM;AAAEf,UAAAA;AAAF,YAAae,GAAnB;;AACA,YAAIf,MAAM,KAAK,MAAf,EAAuB;AACrBO,UAAAA,WAAW,CAACE,KAAD,CAAX;AACAH,UAAAA,UAAU,CAAC,kBAAD,CAAV;AACAD,UAAAA,eAAe;AAChB,SAJD,MAIO,IAAIN,WAAW,CAACC,MAAD,CAAf,EAAyB;AAC9B,gBAAMC,QAAQ,GAAGF,WAAW,CAACC,MAAD,CAA5B;AACAN,UAAAA,QAAQ,GACLoB,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACb,kBAAME,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAWC,MAAX,CAAmBC,CAAD,IAC/BA,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgBrB,QAAhB,CADa,CAAf;AAGAM,YAAAA,WAAW,CAACU,MAAD,CAAX;AACAX,YAAAA,UAAU,CAAE,eAAcL,QAAS,EAAzB,CAAV;AACAI,YAAAA,eAAe;AAChB,WATH;AAUD,SAZM,MAYA,IAAIL,MAAM,CAACsB,QAAP,CAAgB,OAAhB,CAAJ,EAA8B;AACnC,gBAAMC,IAAI,GAAGvB,MAAM,CAACwB,MAAP,CAAc,SAASC,MAAvB,EAA+BC,OAA/B,CAAuC,MAAvC,EAA+C,GAA/C,CAAb;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACA,cAAIoB,CAAJ;;AACA,eAAK,IAAIT,CAAT,IAAcX,KAAK,CAACS,MAApB,EAA4B;AAC1B,gBAAIE,CAAC,CAACC,IAAF,CAAOnB,WAAP,GAAqB4B,IAArB,OAAgCP,IAAI,CAACO,IAAL,EAApC,EAAiD;AAC/CD,cAAAA,CAAC,GAAGT,CAAJ;AACA;AACD;AACF;;AACDb,UAAAA,WAAW,CAAC,EAAD,CAAX;AACAC,UAAAA,YAAY,CAACqB,CAAD,CAAZ;AACAvB,UAAAA,UAAU,CAAC,yBAAD,CAAV;AACAD,UAAAA,eAAe;AAChB;AACF,OAnCH;AAoCD,KArCS,EAqCP,IArCO,CAAV;AAsCD,GAxCD,EAwCG,CAACD,UAAD,CAxCH;AAyCD,CA/CM","sourcesContent":["import { getItems, getIntent } from \"../apis/ncr\";\nimport { MessageContext } from \"../Context\";\nimport React from \"react\";\n\nconst categories = [\"Milk Tea\", \"Chocolate\", \"Oolong\"];\nconst getCategory = (intent) => {\n  for (let category of categories) {\n    if (category.toLowerCase() === intent) {\n      return category;\n    }\n  }\n  return null;\n};\n\nexport const useVoiceCommands = ({\n  transcript,\n  resetTranscript,\n  resetVoice,\n}) => {\n  const { selectItems, addItemOrder, items, setIn } = React.useContext(MessageContext);\n  React.useEffect(() => {\n    if (transcript === \"\") return;\n    setTimeout(() => {\n      getIntent(transcript)\n        .then((res) => res.json())\n        .then((res) => {\n          const { intent } = res;\n          if (intent === \"menu\") {\n            selectItems(items);\n            resetVoice(\"Here is our Menu\");\n            resetTranscript();\n          } else if (getCategory(intent)) {\n            const category = getCategory(intent);\n            getItems()\n              .then((res) => res.json())\n              .then((res) => {\n                const result = res.Result.filter((r) =>\n                  r.Name.includes(category)\n                );\n                selectItems(result);\n                resetVoice(`Here is our ${category}`);\n                resetTranscript();\n              });\n          } else if (intent.includes(\"order\")) {\n            const name = intent.substr(\"order_\".length).replace(/#|_/g, \" \");\n            console.log(items);\n            let s;\n            for (let r of items.Result) {\n              if (r.Name.toLowerCase().trim() === name.trim()) {\n                s = r;\n                break;\n              }\n            }\n            selectItems([]);\n            addItemOrder(s);\n            resetVoice(\"Ok, I added your order.\");\n            resetTranscript();\n          }\n        });\n    }, 5000);\n  }, [transcript]);\n};\n"]},"metadata":{},"sourceType":"module"}