{"ast":null,"code":"import { getItems, getIntent } from \"../apis/ncr\";\nimport { MessageContext } from \"../Context\";\nimport React from \"react\";\nconst categories = [\"Milk Tea\", \"Chocolate\", \"Oolong\"];\n\nconst getCategory = intent => {\n  for (let category of categories) {\n    if (category.toLowerCase() === intent) {\n      return category;\n    }\n  }\n\n  return null;\n};\n\nexport const useVoiceCommands = ({\n  transcript,\n  resetTranscript,\n  resetVoice\n}) => {\n  const {\n    selectItems,\n    addItemOrder\n  } = React.useContext(MessageContext);\n  React.useEffect(() => {\n    if (transcript === \"\") return;\n    setTimeout(() => {\n      getIntent(transcript).then(res => res.json()).then(res => {\n        const {\n          intent\n        } = res;\n\n        if (intent === \"menu\") {\n          getItems().then(res => res.json()).then(res => {\n            selectItems(res.Result);\n            resetVoice(\"Here is our Menu\");\n            resetTranscript();\n          });\n        } else if (getCategory(intent)) {\n          const category = getCategory(intent);\n          getItems().then(res => res.json()).then(res => {\n            const result = res.Result.filter(r => r.Name.includes(category));\n            selectItems(result);\n            resetVoice(`Here is our ${category}`);\n            resetTranscript();\n          });\n        } else if (intent === \"order\") {\n          const name = transcript.substr(\"I want to order\".length);\n          console.log(name);\n          getItems().then(res => res.json()).then(res => {\n            for (let r of res.Result) {\n              // console.log(r.Name);\n              if (r.Name.toLowerCase() === name) {\n                console.log(r);\n                break;\n              }\n            }\n\n            selectItems([]);\n            resetVoice(\"Ok, I added your order.\");\n            resetTranscript();\n          });\n        }\n      });\n    }, 5000);\n  }, [transcript]);\n};","map":{"version":3,"sources":["/Users/thotra/Desktop/hack-gt/src/data/useVoiceCommands.js"],"names":["getItems","getIntent","MessageContext","React","categories","getCategory","intent","category","toLowerCase","useVoiceCommands","transcript","resetTranscript","resetVoice","selectItems","addItemOrder","useContext","useEffect","setTimeout","then","res","json","Result","result","filter","r","Name","includes","name","substr","length","console","log"],"mappings":"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","sourcesContent":["import { getItems, getIntent } from \"../apis/ncr\";\nimport { MessageContext } from \"../Context\";\nimport React from \"react\";\n\nconst categories = [\"Milk Tea\", \"Chocolate\", \"Oolong\"];\nconst getCategory = (intent) => {\n  for (let category of categories) {\n    if (category.toLowerCase() === intent) {\n      return category;\n    }\n  }\n  return null;\n};\n\nexport const useVoiceCommands = ({\n  transcript,\n  resetTranscript,\n  resetVoice,\n}) => {\n  const { selectItems, addItemOrder } = React.useContext(MessageContext);\n  React.useEffect(() => {\n    if (transcript === \"\") return;\n    setTimeout(() => {\n      getIntent(transcript)\n        .then((res) => res.json())\n        .then((res) => {\n          const { intent } = res;\n          if (intent === \"menu\") {\n            getItems()\n              .then((res) => res.json())\n              .then((res) => {\n                selectItems(res.Result);\n                resetVoice(\"Here is our Menu\");\n                resetTranscript();\n              });\n          } else if (getCategory(intent)) {\n            const category = getCategory(intent);\n            getItems()\n              .then((res) => res.json())\n              .then((res) => {\n                const result = res.Result.filter((r) =>\n                  r.Name.includes(category)\n                );\n                selectItems(result);\n                resetVoice(`Here is our ${category}`);\n                resetTranscript();\n              });\n          } else if (intent === \"order\") {\n            const name = transcript.substr(\"I want to order\".length);\n            console.log(name);\n            getItems()\n              .then((res) => res.json())\n              .then((res) => {\n                for (let r of res.Result) {\n                  // console.log(r.Name);\n                  if (r.Name.toLowerCase() === name) {\n                    console.log(r);\n                    break;\n                  }\n                }\n                selectItems([]);\n                resetVoice(\"Ok, I added your order.\");\n                resetTranscript();\n              });\n          }\n        });\n    }, 5000);\n  }, [transcript]);\n};\n"]},"metadata":{},"sourceType":"module"}